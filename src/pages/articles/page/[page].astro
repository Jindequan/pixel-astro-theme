---
import BaseLayout from '../../../components/layout/BaseLayout.astro';
import Header from '../../../components/ui/Header.astro';
import Card from '../../../components/ui/Card.astro';
import SearchFilter from '../../../components/ui/SearchFilter.astro';
import Icon from '../../../components/ui/Icon.astro';
import { getCollection } from 'astro:content';
import { getSiteConfig } from '../../../config/site';

// Function to determine appropriate text color based on background
function getContrastColor(backgroundColor: string): string {
  // Convert hex to RGB
  const hex = backgroundColor.replace('#', '');
  const r = parseInt(hex.substr(0, 2), 16);
  const g = parseInt(hex.substr(2, 2), 16);
  const b = parseInt(hex.substr(4, 2), 16);

  // Calculate luminance (perceived brightness)
  const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;

  // Return black for light backgrounds, white for dark backgrounds
  return luminance > 0.5 ? '#000000' : '#ffffff';
}

export async function getStaticPaths() {
  // Get all posts and filter published ones
  const allPosts = await getCollection('blog');
  const publishedPosts = allPosts.filter(post => !post.data.draft);

  // Sort by publish date (newest first) and featured status
  const sortedPosts = publishedPosts.sort((a, b) => {
    // Featured posts first
    if (a.data.featured && !b.data.featured) return -1;
    if (!a.data.featured && b.data.featured) return 1;
    // Then by date
    return new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime();
  });

  // Calculate pagination
  const postsPerPage = 6;
  const totalPages = Math.ceil(sortedPosts.length / postsPerPage);

  // Generate paths for all pages (start from page 2, since page 1 is handled by index.astro)
  const paths = [];
  for (let page = 2; page <= totalPages; page++) {
    paths.push({
      params: { page: page.toString() }
    });
  }

  return paths;
}

// Get page parameter from URL
const { page } = Astro.params;
const pageNumber = parseInt(page, 10);

// Get site configuration
const siteConfig = getSiteConfig();
const baseUrl = '/articles';

// Get all posts and filter published ones
const allPosts = await getCollection('blog');
const publishedPosts = allPosts.filter(post => !post.data.draft);

// Sort by publish date (newest first) and featured status
const sortedPosts = publishedPosts.sort((a, b) => {
  // Featured posts first
  if (a.data.featured && !b.data.featured) return -1;
  if (!a.data.featured && b.data.featured) return 1;
  // Then by date
  return new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime();
});

// Calculate pagination for this specific page
const postsPerPage = 6;
const totalPages = Math.ceil(sortedPosts.length / postsPerPage);
const startIndex = (pageNumber - 1) * postsPerPage;
const endIndex = startIndex + postsPerPage;
const posts = sortedPosts.slice(startIndex, endIndex);

// Get all unique tags from all posts
const allTagsSet = new Set<string>();
publishedPosts.forEach(post => {
  if (post.data && post.data.tags) {
    post.data.tags.forEach(tag => allTagsSet.add(tag));
  }
});
const allTags = Array.from(allTagsSet).sort();

// Calculate statistics
const featuredCount = publishedPosts.filter(post => post.data.featured).length;

// Prepare article data for search functionality
const articlesData = JSON.stringify(publishedPosts.map(post => {
  try {
    return {
      title: String(post.data?.title || ''),
      description: String(post.data?.description || ''),
      tags: Array.isArray(post.data?.tags) ? post.data.tags : [],
      slug: String(post.slug || ''),
      publishDate: post.data?.publishDate || '',
      featured: Boolean(post.data?.featured || false)
    };
  } catch (e) {
    return null;
  }
}).filter(Boolean));
---

<BaseLayout
  title={`Articles - Page ${pageNumber} - ${siteConfig.siteName}`}
  description={`Browse page ${pageNumber} of our articles collection about web development, design, and more.`}
  particleColor={siteConfig.themeColors.primary}
>
  <Header />

  <main class="pixel-container max-w-7xl mx-auto py-16">
    <div style="display: flex; flex-direction: row; gap: 2rem; width: 100%; align-items: flex-start;">
      <!-- Left sidebar - statistics and filters -->
      <aside style="flex: 0 0 20%; min-width: 200px; margin-left: 0; padding-left: 2rem;">
        <!-- Page Statistics -->
        <div class="pixel-card" style="margin-bottom: 1.5rem;">
          <div style="padding: 1rem;">
            <h2 class="pixel-title-cyan text-base font-bold mb-3" style="text-align: center;">
              <Icon name="book" size={14} style="vertical-align: middle; margin-right: 0.5rem;" />
              LIBRARY STATS
            </h2>
            <div style="display: grid; grid-template-columns: 1fr; gap: 0.75rem;">
              <div style="text-align: center;">
                <h3 class="pixel-title-accent text-xl font-bold">
                  {publishedPosts.length}
                </h3>
                <p class="pixel-text opacity-80 text-xs">
                  TOTAL ARTICLES
                </p>
              </div>
              <div style="text-align: center;">
                <h3 class="pixel-title-green text-xl font-bold">
                  {featuredCount}
                </h3>
                <p class="pixel-text opacity-80 text-xs">
                  FEATURED
                </p>
              </div>
              <div style="text-align: center;">
                <h3 class="pixel-title-magenta text-xl font-bold">
                  {allTags.length}
                </h3>
                <p class="pixel-text opacity-80 text-xs">
                  TAGS
                </p>
              </div>
            </div>
          </div>
        </div>

        <!-- Search and Filter -->
        <div class="pixel-card">
          <div style="padding: 1rem;">
            <h2 class="pixel-title-cyan text-base font-bold mb-3" style="text-align: center;">
              <Icon name="filter" size={14} style="vertical-align: middle; margin-right: 0.5rem;" />
              SEARCH & FILTER
            </h2>
            <SearchFilter
              allTags={allTags}
              baseUrl={baseUrl}
            />
          </div>
        </div>
      </aside>

      <!-- Main content area -->
      <div style="flex: 1; min-width: 0; padding-right: 2rem;">
        <!-- Page Header -->
        <section class="text-center py-12">
          <h1 class="text-5xl font-bold mb-6" style={`color: ${siteConfig.themeColors.accent}; font-family: 'Doto', 'Sixtyfour', monospace; text-shadow: 3px 3px 0 rgba(0,0,0,0.5);`}>
            <Icon name="book" size={32} class="inline-icon" />
            ARTICLES
          </h1>
          <p class="text-xl mb-4 opacity-80 max-w-2xl mx-auto pixel-text pixel-normal">
            Browse page {pageNumber} of {totalPages} in our collection
          </p>
          <div class="text-center pixel-text opacity-60">
            Page {pageNumber} of {totalPages} â€¢ {posts.length} articles showing
          </div>
        </section>

        <!-- Articles Grid (no featured section on paginated pages) -->
        <section class="py-8">
          <div class="text-center mb-8">
            <h2 class="text-3xl font-bold mb-4" style={`color: ${siteConfig.themeColors.accent}; font-family: 'Doto', 'Sixtyfour', monospace; text-shadow: 2px 2px 0 rgba(0,0,0,0.5);`}>
              ARTICLES
            </h2>
          </div>

          <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
            {posts.map((post) => (
              <Card
                key={post.slug}
                title={post.data.title}
                description={post.data.description}
                href={`/articles/${post.slug}/`}
                glowColor={post.data.color}
                className="pixel-card hover:scale-105 transition-transform duration-300"
              >
                <div class="mb-4">
                  {post.data.featured && (
                    <div class="inline-block px-3 py-1 text-xs font-bold mb-2" style={`background-color: ${post.data.color}; color: ${getContrastColor(post.data.color)};`}>
                      <Icon name="star" size={10} class="inline-icon" />
                      FEATURED
                    </div>
                  )}
                  <p class="pixel-text pixel-normal text-sm opacity-60 mb-2">
                    {new Date(post.data.publishDate).toLocaleDateString('en-US', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric'
                    })}
                  </p>
                  {post.data.updateDate && (
                    <p class="pixel-text pixel-normal text-xs opacity-50 mb-2">
                      Updated: {new Date(post.data.updateDate).toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                      })}
                    </p>
                  )}
                  <div class="flex flex-wrap gap-1">
                    {post.data.tags.slice(0, 4).map((tag) => (
                      <span
                        key={tag}
                        class="pixel-tag text-xs"
                        style={`background: ${siteConfig.themeColors.accent}20; color: ${siteConfig.themeColors.accent}; border: 1px solid ${siteConfig.themeColors.accent};`}
                      >
                        {tag.toUpperCase()}
                      </span>
                    ))}
                  </div>
                </div>
              </Card>
            ))}
          </div>
        </section>

        <!-- Pagination -->
        {totalPages > 1 && (
          <section class="py-12">
            <div class="flex justify-center items-center gap-4">
              <!-- Previous Button -->
              {pageNumber > 1 && (
                <a
                  href={pageNumber === 2 ? '/articles' : `/articles/page/${pageNumber - 1}`}
                  class="inline-flex items-center px-4 py-2 border-2 font-bold hover:bg-white hover:text-black transition-colors pagination-button"
                  style={`border-color: ${siteConfig.themeColors.secondary}; color: ${siteConfig.themeColors.secondary};`}
                >
                  <Icon name="chevronLeft" size={16} class="mr-2" />
                  PREVIOUS
                </a>
              )}

              <!-- Page Numbers -->
              <div class="flex gap-2">
                {Array.from({ length: totalPages }, (_, i) => i + 1).map((pageNum) => (
                  <a
                    href={pageNum === 1 ? '/articles' : `/articles/page/${pageNum}`}
                    class={`inline-block px-3 py-2 border-2 font-bold transition-colors pagination-button ${
                      pageNum === pageNumber
                        ? 'bg-white text-black'
                        : 'hover:bg-white hover:text-black'
                    }`}
                    style={`border-color: ${siteConfig.themeColors.secondary}; color: ${
                      pageNum === pageNumber ? '#000000' : siteConfig.themeColors.secondary
                    };`}
                  >
                    {pageNum}
                  </a>
                ))}
              </div>

              <!-- Next Button -->
              {pageNumber < totalPages && (
                <a
                  href={`/articles/page/${pageNumber + 1}`}
                  class="inline-flex items-center px-4 py-2 border-2 font-bold hover:bg-white hover:text-black transition-colors pagination-button"
                  style={`border-color: ${siteConfig.themeColors.secondary}; color: ${siteConfig.themeColors.secondary};`}
                >
                  NEXT
                  <Icon name="chevronRight" size={16} class="ml-2" />
                </a>
              )}
            </div>
          </section>
        )}
      </div>
    </div>
  </main>

  <!-- Script for search functionality -->
  <script define:vars={{ articlesData }}>
    window.articlesData = articlesData;
  </script>
</BaseLayout>

<style>
  /* Featured cards special styling */
  .featured-card {
    border-color: var(--theme-primary) !important;
    box-shadow: 0 0 15px var(--theme-primary) !important;
  }

  .featured-card:hover {
    transform: translateY(-4px) scale(1.02);
    box-shadow: 0 8px 25px var(--theme-primary) !important;
  }

  /* Responsive grid adjustments */
  @media (max-width: 768px) {
    .grid-cols-3 {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (max-width: 480px) {
    .grid-cols-3 {
      grid-template-columns: repeat(1, 1fr);
    }
  }

  /* Smooth transitions */
  .pixel-card {
    transition: all 0.3s ease;
  }

  /* Tag hover effects */
  .pixel-tag {
    transition: all 0.2s ease;
    cursor: pointer;
  }

  .pixel-tag:hover {
    transform: scale(1.05);
  }

  /* Mobile typography adjustments */
  @media (max-width: 640px) {
    .text-5xl {
      font-size: 2.5rem;
    }

    .text-3xl {
      font-size: 1.75rem;
    }
  }

  /* Pagination styling */
  .pagination-button {
    image-rendering: pixelated;
    image-rendering: -moz-crisp-edges;
    image-rendering: crisp-edges;
  }

  .pagination-button:hover {
    transform: scale(1.05);
  }
</style>