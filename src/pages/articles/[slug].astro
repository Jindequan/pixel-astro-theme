---
import BaseLayout from '../../components/layout/BaseLayout.astro';
import Header from '../../components/ui/Header.astro';
import Video from '../../components/ui/Video.astro';
import Audio from '../../components/ui/Audio.astro';
import Gallery from '../../components/ui/Gallery.astro';
import { getCollection } from 'astro:content';
import { getSiteConfig } from '../../config/site';

// Function to determine appropriate text color based on background
function getContrastColor(backgroundColor: string): string {
  // Convert hex to RGB
  const hex = backgroundColor.replace('#', '');
  const r = parseInt(hex.substr(0, 2), 16);
  const g = parseInt(hex.substr(2, 2), 16);
  const b = parseInt(hex.substr(4, 2), 16);

  // Calculate luminance (perceived brightness)
  const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;

  // Return black for light backgrounds, white for dark backgrounds
  return luminance > 0.5 ? '#000000' : '#ffffff';
}

// Generate static paths for all blog posts
export async function getStaticPaths() {
  const allPosts = await getCollection('blog');
  const paths = [];

  for (const post of allPosts) {
    const { Content } = await post.render();
    paths.push({
      params: { slug: post.slug },
      props: { post, Content },
    });
  }

  return paths;
}

// Get the slug from the URL params
const { slug } = Astro.params;
const { post, Content } = Astro.props;

// Get all blog posts for related posts
const allPosts = await getCollection('blog');

// If post not found, show 404
if (!post) {
  return Astro.redirect('/404');
}

// Get related posts (exclude current post)
const relatedPosts = allPosts
  .filter(p => p.slug !== slug)
  .slice(0, 2)
  .map(p => ({
    slug: p.slug,
    title: p.data.title,
    description: p.data.description,
    color: p.data.color
  }));

// Get dynamic OG image
const ogImageUrl = `/api/og-image.png?title=${encodeURIComponent(post.data.title)}&description=${encodeURIComponent(post.data.description)}&particleColor=${encodeURIComponent(post.data.color)}`;
---

<BaseLayout
  title={post.data.title}
  description={post.data.description}
  ogImage={post.data.ogImage || ogImageUrl}
>
  <Header />

  <main class="pixel-container max-w-4xl mx-auto">
    <!-- Article Header -->
    <article class="py-8">
      <header class="text-center mb-12">
        <!-- Featured Badge -->
        {post.data.featured && (
          <div class="mb-4">
            <div class="inline-block px-4 py-2 text-sm font-bold"
                 style={`background-color: ${post.data.color}; color: ${getContrastColor(post.data.color)};`}>
              ‚≠ê FEATURED ARTICLE
            </div>
          </div>
        )}

        <!-- Article Title -->
        <div class="mb-6">
          <h1 class={`pixel-title text-4xl font-bold`} style={`color: ${post.data.color};`}>
            {post.data.title.toUpperCase().replace(/\s+/g, ' ')}
          </h1>
        </div>

        <!-- Article Description -->
        <div class="mb-8 max-w-3xl mx-auto">
          <p class="pixel-text pixel-normal text-lg opacity-80">
            {post.data.description}
          </p>
        </div>

        <!-- Article Meta -->
        <div class="flex items-center justify-center space-x-6 opacity-80 mb-6">
          <span class="pixel-text pixel-normal text-sm">
            üìÖ {post.data.publishDate.toLocaleDateString('en-US')}
          </span>
          {post.data.author && (
            <span class="pixel-text pixel-normal text-sm">
              üë§ {post.data.author}
            </span>
          )}
          {post.data.updateDate && post.data.updateDate.getTime() !== post.data.publishDate.getTime() && (
            <>
              <span class="text-xs">‚Ä¢</span>
              <span class="pixel-text pixel-normal text-sm">
                üîÑ Updated {post.data.updateDate.toLocaleDateString('en-US')}
              </span>
            </>
          )}
        </div>

        <!-- Article Tags -->
        <div class="flex items-center justify-center space-x-2 flex-wrap gap-2">
          {post.data.tags.map((tag) => (
            <span key={tag} class="pixel-tag text-xs" style={`background-color: ${post.data.color}; border-color: ${post.data.color};`}>
              {tag}
            </span>
          ))}
        </div>
      </header>

      <!-- Article Content -->
      <div class="space-y-8">
        <div class="pixel-card">
          <div class="prose prose-invert prose-lg max-w-none
                      prose-headings:text-pixel-cyan
                      prose-h1:text-3xl prose-h2:text-2xl prose-h3:text-xl
                      prose-p:pixel-text prose-p:pixel-normal
                      prose-strong:text-pixel-green
                      prose-code:text-pixel-yellow
                      prose-pre:bg-pixel-darker prose-pre:border-2 prose-pre:border-green-500
                      prose-blockquote:border-l-4 prose-blockquote:border-pixel-magenta
                      prose-a:text-pixel-cyan prose-a:no-underline hover:prose-a:underline
                      prose-img:border-2 prose-img:border-pixel-orange
                      prose-table:border-2 prose-table:border-pixel-cyan
                      prose-th:border-2 prose-th:border-pixel-cyan
                      prose-td:border-2 prose-td:border-pixel-cyan">
            <Content />
          </div>
        </div>

        <!-- Related Articles -->
        {relatedPosts.length > 0 && (
          <section class="py-8">
            <h2 class="pixel-subtitle mb-6 text-pixel-yellow text-center">
              RELATED ARTICLES
            </h2>
            <div class="grid gap-6 md:grid-cols-2">
              {relatedPosts.map((relatedPost) => (
                <div class="pixel-card">
                  <h3 class="pixel-text pixel-normal font-bold mb-2" style={`color: ${relatedPost.color};`}>
                    {relatedPost.title}
                  </h3>
                  <p class="pixel-text pixel-normal opacity-80 text-sm mb-4">
                    {relatedPost.description}
                  </p>
                  <a
                    href={`/articles/${relatedPost.slug}`}
                    class="pixel-button text-sm"
                    style={`border-color: ${relatedPost.color}; color: ${relatedPost.color}; background-color: transparent;`}
                    onMouseOver={(e) => {
                      e.target.style.backgroundColor = relatedPost.color;
                      e.target.style.color = '#000000';
                    }}
                    onMouseOut={(e) => {
                      e.target.style.backgroundColor = 'transparent';
                      e.target.style.color = relatedPost.color;
                    }}
                  >
                    READ MORE
                  </a>
                </div>
              ))}
            </div>
          </section>
        )}
      </div>
    </article>
  </main>

  <!-- Pixel decoration background -->
  <div class="fixed bottom-4 right-4 opacity-20 z-0">
    <h4 class="heading text-lg font-bold" style={`color: ${post.data.color}; font-family: 'Doto', 'Sixtyfour', monospace;`}>
      ARTICLE
    </h4>
  </div>

  <div class="fixed top-1/2 left-4 opacity-20 z-0 transform -rotate-90">
    <h4 class="heading text-lg font-bold" style={`color: ${post.data.color}; font-family: 'Doto', 'Sixtyfour', monospace;`}>
      {post.data.title.toUpperCase().slice(0, 12)}
    </h4>
  </div>

  <!-- Pixel grid background -->
  <div class="fixed inset-0 pixel-grid opacity-10 -z-10 pointer-events-none"></div>
</BaseLayout>